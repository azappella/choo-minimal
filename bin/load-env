const fs = require('fs')
const path = require('path')
const spawn = require('cross-spawn')
const appDirectory = fs.realpathSync(process.cwd())
const dotenv = path.resolve(appDirectory, '.env')
const argv = require('minimist')(process.argv.slice(2))

// The full order of precedence is (highest first):
// shell
// .env.local
// .env
const dotenvFiles = [
    // Don't include `.env.local` for `test` environment
    // since normally you expect tests to produce the same
    // results for everyone
    process.env.NODE_ENV !== 'test' && `${dotenv}.local`,
    dotenv
].filter(Boolean)

// Load environment variables from .env* files. Suppress warnings using silent
// if this file is missing. dotenv will never modify any environment variables
// that have already been set.  Variable expansion is supported in .env files.
// https://github.com/motdotla/dotenv
// https://github.com/motdotla/dotenv-expand
dotenvFiles.forEach(dotenvFile => {
    if (fs.existsSync(dotenvFile)) {
        require('dotenv-expand')(
            require('dotenv').config({
                path: dotenvFile
            })
        )
    }
})

if (!process.env.NODE_ENV) {
    throw new Error(`
        Missing config:
            Some environment variables are required but not specified.
            To get started, create a .env file and put your environment vars
            inside that file.
    `);
}

// TODO: compare .env with .env.local and check whether .env.local has keys
// that are not in .env and suggest to the user to put the key/value pair inside
// the .env file

if (argv.p) {
    console.log(process.env[argv.p])
    process.exit()
}

spawn(argv._[0], argv._.slice(1), { stdio: 'inherit' })
.on('exit', (exitCode) => {
    process.exit(exitCode)
})

